var documenterSearchIndex = {"docs":
[{"location":"usage/#usage","page":"Using ImageSmooth","title":"Using ImageSmooth","text":"","category":"section"},{"location":"usage/","page":"Using ImageSmooth","title":"Using ImageSmooth","text":"CurrentModule = ImageSmooth\nDocTestSetup = quote\n    using ImageSmooth\nend","category":"page"},{"location":"usage/#Installation","page":"Using ImageSmooth","title":"Installation","text":"","category":"section"},{"location":"usage/","page":"Using ImageSmooth","title":"Using ImageSmooth","text":"You can install ImageSmooth.jl via package manager.","category":"page"},{"location":"usage/","page":"Using ImageSmooth","title":"Using ImageSmooth","text":"(@v1.6) pkg> add ImageSmooth","category":"page"},{"location":"usage/#Using-an-image-smoothing-algorithm","page":"Using ImageSmooth","title":"Using an image-smoothing algorithm","text":"","category":"section"},{"location":"usage/","page":"Using ImageSmooth","title":"Using ImageSmooth","text":"Each smoothing algorithm in ImageSmooth.jl is an AbstractImageSmoothAlgorithm.","category":"page"},{"location":"usage/","page":"Using ImageSmooth","title":"Using ImageSmooth","text":"Currently, there is one image-smoothing algorithm can be used:","category":"page"},{"location":"usage/","page":"Using ImageSmooth","title":"Using ImageSmooth","text":"L0 Smooth","category":"page"},{"location":"usage/","page":"Using ImageSmooth","title":"Using ImageSmooth","text":"You can define an image-smoothing algorithm fₛ as follow.","category":"page"},{"location":"usage/","page":"Using ImageSmooth","title":"Using ImageSmooth","text":"using ImageSmooth\nfₛ = L0Smooth()","category":"page"},{"location":"usage/#Applying-the-algorithm-to-the-image","page":"Using ImageSmooth","title":"Applying the algorithm to the image","text":"","category":"section"},{"location":"usage/","page":"Using ImageSmooth","title":"Using ImageSmooth","text":"All of the algorithms are applied to the image via smooth or the in-place operation smooth!.","category":"page"},{"location":"usage/","page":"Using ImageSmooth","title":"Using ImageSmooth","text":"smooth","category":"page"},{"location":"usage/","page":"Using ImageSmooth","title":"Using ImageSmooth","text":"using TestImages, ImageSmooth\nimg = testimage(\"cameraman\")\nfₛ = L0Smooth()","category":"page"},{"location":"usage/","page":"Using ImageSmooth","title":"Using ImageSmooth","text":"imgₛ = smooth(img, fₛ);","category":"page"},{"location":"usage/","page":"Using ImageSmooth","title":"Using ImageSmooth","text":"smooth!","category":"page"},{"location":"usage/","page":"Using ImageSmooth","title":"Using ImageSmooth","text":"using Images, TestImages, ImageSmooth\nimg = testimage(\"cameraman\")\nfₛ = L0Smooth()","category":"page"},{"location":"usage/","page":"Using ImageSmooth","title":"Using ImageSmooth","text":"imgₛ = similar(img);\n\nsmooth!(imgₛ, img, fₛ);","category":"page"},{"location":"usage/#Demonstration","page":"Using ImageSmooth","title":"Demonstration","text":"","category":"section"},{"location":"usage/","page":"Using ImageSmooth","title":"Using ImageSmooth","text":"To use the smoothing operator, you have to first define a fₛ::AbstractImageSmoothAlgorithm, like L0Smooth. Then you can apply fₛ by using smooth or smooth!.","category":"page"},{"location":"usage/","page":"Using ImageSmooth","title":"Using ImageSmooth","text":"You can use smooth to process your image:","category":"page"},{"location":"usage/","page":"Using ImageSmooth","title":"Using ImageSmooth","text":"using Images, TestImages","category":"page"},{"location":"usage/","page":"Using ImageSmooth","title":"Using ImageSmooth","text":"using ImageSmooth\n\nimg = testimage(\"cameraman\")\n\n# Define the smoothing algorithm needed to use\nfₛ = L0Smooth() # using default arguements\n\n# Apply the algorithm to the image\nimgₛ = smooth(img, fₛ)\n\n# View the original image and the smoothed image\nmosaicview(img, imgₛ; nrow=1)","category":"page"},{"location":"usage/","page":"Using ImageSmooth","title":"Using ImageSmooth","text":"You can also use the in-place operator smooth!:","category":"page"},{"location":"usage/","page":"Using ImageSmooth","title":"Using ImageSmooth","text":"using ImageSmooth\n\nimg = testimage(\"cameraman\")\n\nfₛ = L0Smooth()\n\nimgₛ = similar(img)\n\nsmooth!(imgₛ, img, fₛ)\n\n# View the original image and the smoothed image\nmosaicview(img, imgₛ; nrow=1)","category":"page"},{"location":"reference/#package_references","page":"Package References","title":"Package References","text":"","category":"section"},{"location":"reference/","page":"Package References","title":"Package References","text":"Pages = [\"reference.md\"]\nDepth = 3","category":"page"},{"location":"reference/#General-function","page":"Package References","title":"General function","text":"","category":"section"},{"location":"reference/","page":"Package References","title":"Package References","text":"smooth\nsmooth!","category":"page"},{"location":"reference/#ImageSmooth.SmoothAPI.smooth","page":"Package References","title":"ImageSmooth.SmoothAPI.smooth","text":"smooth(img, fₛ::AbstractImageSmoothAlgorithm, args...; kwargs...)\n\nSmooth img using algorithm fₛ\n\nOutput\n\nThe return image imgₛ is an Array{Gray{N0f8}} forGrayimage, andArray{RGB{N0f8}}forRGB` image.\n\nExamples\n\nJust simply pass the input image and algorithm to smooth\n\nfₛ = L0Smooth()\n\nimgₛ = smooth(img, fₛ)\n\nThis reads as \"smooth image img using smoothing algorithm fₛ\".\n\nSee also smooth! for in-place smoothing.\n\n\n\n\n\n","category":"function"},{"location":"reference/#ImageSmooth.SmoothAPI.smooth!","page":"Package References","title":"ImageSmooth.SmoothAPI.smooth!","text":"smooth!(out::GenericImage, img::GenericImage, fₛ::AbstractImageSmoothAlgorithm, args...; kwargs...)\n\nSmooth img::GenericImage using algorithm fₛ\n\nOutput\n\nout will be changed in place.\n\nExamples\n\nJust simply pass an algorithm to smooth!:\n\n# First generate an algorithm instance\nfₛ = L0Smooth()\n\n## For Gray or RGB images\nimgₛ = similar(img)\n\nsmooth!(imgₛ, img, fₛ)\n\nSee also: smooth\n\n\n\n\n\n","category":"function"},{"location":"reference/#Algorithm","page":"Package References","title":"Algorithm","text":"","category":"section"},{"location":"reference/","page":"Package References","title":"Package References","text":"ImageSmooth.SmoothAPI.AbstractImageAlgorithm\nImageSmooth.SmoothAPI.AbstractImageFilter\nImageSmooth.SmoothAPI.AbstractImageSmoothAlgorithm","category":"page"},{"location":"reference/#ImageSmooth.SmoothAPI.AbstractImageAlgorithm","page":"Package References","title":"ImageSmooth.SmoothAPI.AbstractImageAlgorithm","text":"AbstractImageAlgorithm\n\nThe root of image algorithms type system\n\n\n\n\n\n","category":"type"},{"location":"reference/#ImageSmooth.SmoothAPI.AbstractImageFilter","page":"Package References","title":"ImageSmooth.SmoothAPI.AbstractImageFilter","text":"AbstractImageFilter <: AbstractImageAlgorithm\n\nFilters are image algorithms whose input and output are both images\n\n\n\n\n\n","category":"type"},{"location":"reference/#ImageSmooth.SmoothAPI.AbstractImageSmoothAlgorithm","page":"Package References","title":"ImageSmooth.SmoothAPI.AbstractImageSmoothAlgorithm","text":"AbstractImageSmoothAlgorithm <: AbstractImageFilter\n\nThe root type for ImageSmooth package.\n\nAny image smoothing algorithm shall subtype it to support smooth and smooth! APIs.\n\nExamples\n\nAll algorithm in ImageSmooth are called in the following pattern,  take L0Smooth <: AbstractImageSmoothAlgorithm as an example:\n\n# First generate an algorithm instance\nfₛ = L0Smooth()\n\n# Then pass the algorithm to `smooth`\nimgₛ = smooth(img, fₛ)\n\n# Or use in-place version `smooth!`\nimgₛ = similar(img)\n\nsmooth!(imgₛ, img, fₛ)\n\nSome algorithms also receive parameters to control the smoothing process and  to get an expected smooth degree.\n\n# You could explicit specify it\nf = L0Smooth(λ=0.04, κ=1.5, βmax=1e6)\n\n# Or infer the default value\nf = L0Smooth()\n\nFor more examples, please check smooth and smooth! and concret algorithms.\n\n\n\n\n\n","category":"type"},{"location":"#ImageSmooth.jl","page":"Home","title":"ImageSmooth.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = ImageSmooth\nDocTestSetup = quote\n    using ImageSmooth\nend","category":"page"},{"location":"","page":"Home","title":"Home","text":"ImageSmooth is a Julia package which spports a number of image-smoothing algorithms. The core function is smooth.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This documentation is a collection of several parts:","category":"page"},{"location":"","page":"Home","title":"Home","text":"The \"Usage\" part introduces how to use the Smooth API.\nThe \"Algorithms\" part contains the details of algorithms supported by ImageSmooth. We also give some demonstrations for different algorithms.","category":"page"},{"location":"","page":"Home","title":"Home","text":"For more advanced usage, please check \"Package References\" page.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"index.md\",\n    \"usage.md\",\n    \"algorithms.md\",\n    \"reference.md\",\n]","category":"page"},{"location":"algorithms/#algorithms","page":"Algorithms","title":"Algorithms","text":"","category":"section"},{"location":"algorithms/","page":"Algorithms","title":"Algorithms","text":"The image-smoothing algorithms in Julia.","category":"page"},{"location":"algorithms/#l0_smooth","page":"Algorithms","title":"L0 Smooth","text":"","category":"section"},{"location":"algorithms/","page":"Algorithms","title":"Algorithms","text":"L0 Smooth (paper) is an image-smoothing algorthim through minimizing the L0 norm of image's gradient.","category":"page"},{"location":"algorithms/","page":"Algorithms","title":"Algorithms","text":"L0Smooth","category":"page"},{"location":"algorithms/#ImageSmooth.L0Smooth","page":"Algorithms","title":"ImageSmooth.L0Smooth","text":"L0Smooth <: AbstractImageSmoothAlgorithm\nL0Smooth(; λ=2e-2, κ=2.0, βmax=1e5)\n\nsmooth(img, f::L0Smooth)\nsmooth!(out, img, f::L0Smooth)\n\nSmoothing img via L0 gradient minimization to approximate prominent structure in a sparsity-control manner.\n\nOutput\n\nReturn Array{Gray{N0f8}} for Gray input or Array{RGB{N0f8}} for RGB input.\n\nDetails\n\nUsing the strategy of minimizing the L0 norm of image's gradient.\n\nThis algorithm works particularly effective for sharpening major edges by  increasing the steepness of amplitude transition while eliminating  low-amplitude structures to some extent. See [1] for more details. \n\nOptions\n\nThe function argument is described in detail below.\n\nλ::Float64\n\nThe argument 𝜆 is a weight directly controlling the significance of  the L0 gradient norm term, which must be greater than zero.\n\nA larger 𝜆 makes the smoothed image have very few edges.\n\nDefault: 2e-2\n\nβmax::Float64\n\nThe argument βmax is the upper bound of 𝛽 in [1], which must be greater than 1e4.\n\nIn this algorithm, two auxiliary variables ℎ and 𝑣 are used to approximate  the solution. A large enough 𝛽 ensures that the alternating optimization strategy  based on introducing auxiliary variables is available.\n\nDefault: 1e5\n\nκ::Float64\n\nThe argument 𝜅 is the iteraiton rate, which must be larger than 1.0.\n\nThis algorithm using an alternating optimization strategy to get the solution. In each iteration, the argument 𝛽 controls the similarity between gradient pair  (𝛥₁𝑆ₚ, 𝛥₂𝑆ₚ) (denoted by (partial_x S_p partial_y S_p) in [1]) and auxiliary pair (ℎₚ, 𝑣ₚ). The argument 𝜅 is used to update 𝛽 as 𝛽 ⟵ 𝜅𝛽.\n\nDefault: 2.0\n\nExamples\n\nYou can use the default arguments for L0Smooth, and then use smooth to apply  the AbstractImageSmoothAlgorithm.\n\nusing TestImages\nusing ImageSmooth\n\nimg = testimage(\"cameraman\")\n\nfₛ = L0Smooth() # using default arguements\nimgₛ = smooth(img, fₛ)\n\nManually setting the arguements is also available:\n\nfₛ = L0Smooth(λ=0.0015, κ=1.05, βmax=2e5) # manually set the arguments\nimgₛ = smooth(img, fₛ)\n\nSee also smooth! for in-place operation.\n\nReferences\n\n[1] Xu, L., Lu, C., Xu, Y., & Jia, J. (2011, December). Image smoothing via L 0 gradient minimization. In Proceedings of the 2011 SIGGRAPH Asia conference (pp. 1-12). DOI:10.1145/2024156.2024208\n\n\n\n\n\n","category":"type"},{"location":"algorithms/#Using-in-the-REPL","page":"Algorithms","title":"Using in the REPL","text":"","category":"section"},{"location":"algorithms/","page":"Algorithms","title":"Algorithms","text":"using ImageSmooth\nL0Smooth()","category":"page"},{"location":"algorithms/#Details-of-L0-Smoothing","page":"Algorithms","title":"Details of L0 Smoothing","text":"","category":"section"},{"location":"algorithms/","page":"Algorithms","title":"Algorithms","text":"For 2D image, the input image is denoted by I and the computed result is denoted by S. The gradient nabla S_p=(partial_x S_ppartial_y S_p)^T for each pixel p is calculated as forward difference along the x and y directions.","category":"page"},{"location":"algorithms/","page":"Algorithms","title":"Algorithms","text":"So, the L0 gradient term of this algorithm is denoted as follow:","category":"page"},{"location":"algorithms/","page":"Algorithms","title":"Algorithms","text":"C(S)=leftpbig partial_x S_p+partial_y S_pne 0 right ","category":"page"},{"location":"algorithms/","page":"Algorithms","title":"Algorithms","text":"And S is estimated by solving:","category":"page"},{"location":"algorithms/","page":"Algorithms","title":"Algorithms","text":"mathoptextminlimits_S left mathopsumlimits_p(S_p-I_p)^2 + lambda cdot C(S) right ","category":"page"},{"location":"algorithms/","page":"Algorithms","title":"Algorithms","text":"However, it's hard to solve this equation. So the strategy is using an alternating optimization, especially, introducing auxiliary variables h_p and v_p , corresponding to partial_x S_p and partial_y S_p respectively, to approximate the solution of the primal equation.","category":"page"},{"location":"algorithms/","page":"Algorithms","title":"Algorithms","text":"Thus, the objective function of this algorithm becomes:","category":"page"},{"location":"algorithms/","page":"Algorithms","title":"Algorithms","text":"mathoptextminlimits_Shvleftmathopsumlimits_p(S_p-I_p)^2 + lambda C(hv) + beta left((partial_x S_p-h_p)^2 + (partial_y S_p-v_p)^2 right)right ","category":"page"},{"location":"algorithms/","page":"Algorithms","title":"Algorithms","text":"where C(hv)=leftpbig h_p+v_pne 0 right, and beta is an automatically adapting parameter.","category":"page"},{"location":"algorithms/","page":"Algorithms","title":"Algorithms","text":"The new objective function can be splitted into two subproblems. Both of them can get the solution so that the altered problem is solvable.","category":"page"},{"location":"algorithms/#*Subproblem-1:-computing*-S","page":"Algorithms","title":"Subproblem 1: computing S","text":"","category":"section"},{"location":"algorithms/","page":"Algorithms","title":"Algorithms","text":"The subproblem for S is to minimize:","category":"page"},{"location":"algorithms/","page":"Algorithms","title":"Algorithms","text":"leftmathopsumlimits_p(S_p-I_p)^2 + beta left((partial_x S_p-h_p)^2 + (partial_y S_p-v_p)^2 right)right ","category":"page"},{"location":"algorithms/","page":"Algorithms","title":"Algorithms","text":"and the solution is:","category":"page"},{"location":"algorithms/","page":"Algorithms","title":"Algorithms","text":"S = mathscrF^-1left(fracmathscrF(I) + beta left(mathscrF(partial_x)^*mathscrF(h) + mathscrF(partial_y)^*mathscrF(v)right)mathscrF(1) + beta left(mathscrF(partial_x)^*mathscrF(partial_x) + mathscrF(partial_y)^*mathscrF(partial_y)right)right)","category":"page"},{"location":"algorithms/#*Subproblem-2:-computing*-(h,v)","page":"Algorithms","title":"Subproblem 2: computing (hv)","text":"","category":"section"},{"location":"algorithms/","page":"Algorithms","title":"Algorithms","text":"The objective function for (hv) is:","category":"page"},{"location":"algorithms/","page":"Algorithms","title":"Algorithms","text":"mathoptextminlimits_hvleftmathopsumlimits_p (partial_x S_p-h_p)^2 + (partial_y S_p-v_p)^2 + fraclambdabeta C(hv)right ","category":"page"},{"location":"algorithms/","page":"Algorithms","title":"Algorithms","text":"It can be spatially decomposed because each element h_p and v_p of pixel p can be estimated individually. Thus, the equation is decommposed to:","category":"page"},{"location":"algorithms/","page":"Algorithms","title":"Algorithms","text":"mathopsumlimits_p mathoptextminlimits_h_pv_pleft(h_p - partial_x S_p)^2 + (v_p - partial_y S_p)^2 + fraclambdabeta H(h_p + v_p)right ","category":"page"},{"location":"algorithms/","page":"Algorithms","title":"Algorithms","text":"where","category":"page"},{"location":"algorithms/","page":"Algorithms","title":"Algorithms","text":"H(h_p + v_p) =\nbegincases\n1 qquad  h_p + v_p ne 0 \n0 qquad  h_p + v_p = 0\nendcases","category":"page"},{"location":"algorithms/","page":"Algorithms","title":"Algorithms","text":"and the solution for each pixel p is:","category":"page"},{"location":"algorithms/","page":"Algorithms","title":"Algorithms","text":"(h_p v_p) =\nbegincases\n(0 0) qquad  (partial_x S_p)^2 + (partial_y S_p)^2 le fraclambdabeta \n(partial_x S_p partial_y S_p) qquad  otherwise\nendcases","category":"page"},{"location":"algorithms/#Demonstration","page":"Algorithms","title":"Demonstration","text":"","category":"section"},{"location":"algorithms/","page":"Algorithms","title":"Algorithms","text":"In the following examples, L0 Smooth algorithm is used to smoothing both Gray image and RGB image.","category":"page"},{"location":"algorithms/","page":"Algorithms","title":"Algorithms","text":"using ImageCore, ImageShow, TestImages","category":"page"},{"location":"algorithms/","page":"Algorithms","title":"Algorithms","text":"using ImageSmooth\n\n# L0 Smooth for Gray images\nimg_gray = testimage(\"cameraman\")\n\n# Using L0 Smooth algorithm\nfₛ = L0Smooth() # using default arguements\n\n# Apply the algorithm to the image\nimgₛ = smooth(img_gray, fₛ)\n\nmosaicview(img_gray, imgₛ; nrow=1)","category":"page"},{"location":"algorithms/","page":"Algorithms","title":"Algorithms","text":"using ImageSmooth # hide\n# L0 Smooth for RGB images\nimg_rgb = testimage(\"lena_color_512\")\n\nfₛ = L0Smooth(λ=4e-2, κ=2.0, βmax=1e5) # manually setting arguements\n\nimgₛ = smooth(img_rgb, fₛ)\n\nmosaicview(img_rgb, imgₛ; nrow=1)","category":"page"}]
}
